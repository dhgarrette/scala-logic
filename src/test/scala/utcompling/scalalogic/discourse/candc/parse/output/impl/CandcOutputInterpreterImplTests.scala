package utcompling.scalalogic.discourse.candc.parse.output.impl

import org.junit.Test

class CandcOutputInterpreterImplTests {

  @Test
  def test() {

    val single = """# this file was generated by the following command(s):
#   /Users/dhg/workspace/candc/bin/candc --models /Users/dhg/workspace/candc/bin/../models --candc-printer grs

(xcomp _ is_1 short_2)
(ncsubj is_1 John_0 _)
<c> John|John|NNP|I-NP|I-LOC|N is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) short|short|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

(xcomp _ is_1 young_2)
(ncsubj is_1 He_0 _)
<c> He|he|PRP|I-NP|O|NP is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) young|young|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

id('0', [1, 2]).


"""
    val multiple = """# this file was generated by the following command(s):
#   /Users/dhg/workspace/candc/bin/candc --models /Users/dhg/workspace/candc/bin/../models --candc-printer grs

(xcomp _ is_1 short_2)
(ncsubj is_1 John_0 _)
<c> John|John|NNP|I-NP|I-LOC|N is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) short|short|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

(xcomp _ is_1 young_2)
(ncsubj is_1 He_0 _)
<c> He|he|PRP|I-NP|O|NP is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) young|young|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

id('0', [1, 2]).

(xcomp _ is_1 tall_2)
(ncsubj is_1 Bill_0 _)
<c> Bill|Bill|NNP|I-NP|O|N is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) tall|tall|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

(xcomp _ is_1 old_2)
(ncsubj is_1 He_0 _)
<c> He|he|PRP|I-NP|O|NP is|be|VBZ|I-VP|O|(S[dcl]\NP)/(S[adj]\NP) old|old|JJ|I-ADJP|O|S[adj]\NP .|.|.|O|O|.

id('1', [3, 4]).

"""

    val forget = """# this file was generated by the following command(s):
#   /Users/dhg/workspace/candc/bin/candc --models /Users/dhg/workspace/candc/bin/../models --candc-printer grs

(ncsubj left_4 Bill_3 _)
(ccomp that_2 forgot_1 left_4)
(ncsubj forgot_1 John_0 _)
<c> John|John|NNP|I-NP|I-PER|N forgot|forget|VBD|I-VP|O|(S[dcl]\NP)/S[em] that|that|IN|I-SBAR|O|S[em]/S[dcl] Bill|Bill|NNP|I-NP|I-PER|N left|leave|VBD|I-VP|O|S[dcl]\NP .|.|.|O|O|.

id('0', [1]).
"""

    val o = new CandcOutputInterpreterImpl()
    for (str <- List(single, multiple, forget)) {
      val discourses = o.interpret(str)
      println(discourses)
      for ((discId, d) <- discourses) {
        println("Discourse " + discId)
        if (d.isDefined) {
          for (s <- d.get.sentences) {
            for (w <- s.words) {
              println("  " + w)
              for (dep <- w.dependencies)
                println("    " + dep)
            }
          }
        }
      }
    }

  }
}
